/*
 * cpu.cpp
 *
 *  Created on: 12 окт. 2019 г.
 *      Author: shishqa
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <math.h>
#include <ncurses.h>

#include "ms_stream.h"
#include "ms_stack.h"
#include "assert_ext.h"
#include "../../config/config.h"
#include "../../config/cmd_enum.h"
#include "cpu.h"

Err_n Processor (FILE* in)
{
    if (in == nullptr)
    {
    	return (INPUT_ERR);
    }

    ASSERT (in != nullptr);

    char* buffer = nullptr;
    size_t size_of_file = Read (&buffer, in);

    ASSERT (buffer != nullptr)

    if (size_of_file < sizeof (Signature))
    {
        printf ("error: wrong format of file\n");

        free (buffer);

        return (FORMAT_ERR);
    }

    size_t curr_line = 1;

    Stack_t cpu_stack = {};
    StackConstruct (&cpu_stack);

    Stack_t call_stack = {};
    StackConstruct (&call_stack);

    Elem_t reg[USER_REG_NUM + HIDDEN_REG_NUM] = {};
    Elem_t ram[RAM_SIZE + VRAM_SIZE] = {};

    char* code_begin = buffer + sizeof (Signature);

    char* curr = code_begin;

    Argument arg = {};

    while (curr < buffer + size_of_file)
    {
        switch (*curr)
        {
			#define DEF_CMD( opcode, name, type, len, n_args, stack_args, code ) \
																				 \
			case CMD_##name: { if (cpu_stack.size < stack_args) 			 	 \
							   {                                             	 \
								   free (buffer);		             			 \
								   StackDestruct (&cpu_stack);		     		 \
								   return (FEW_STK_ARGS_ERR);                  	 \
							   }                                             	 \
							   code                                          	 \
							   break; }

			//----------------------------------
			// autogenerated
			//----------------------------------
			#include "../../config/cmd_defines.h"
			//----------------------------------
			// autogenerated
			//----------------------------------

			#undef DEF_CMD

			default:  free (buffer);
					  StackDestruct (&cpu_stack);
					  return (WRONG_CMD_ERR);
					  break;
        }

        if (StackValid (&cpu_stack) != OK_CODE)
        {
            return (STACK_ERR);
        }

        ++curr_line;
    }

    free (buffer);
    StackDestruct (&cpu_stack);



    return (NO_END_ERR);
}


int BinaryPow (int x, int a)
{
    if (a < 0)
    {
    	return 0;
    }
    if (a == 0)
    {
    	return 1;
    }

    int tmp = BinaryPow (x, a / 2);

    return ((a % 2 == 0) ? (tmp * tmp) : (tmp * tmp * x));
}











